---
import { initializeApp } from 'firebase/app'
import { doc, getDoc, getFirestore } from 'firebase/firestore'
import { marked, type Tokens } from 'marked'
import type { RelatoDocument } from 'src/types/firebase.types'

import { TOC } from 'astro-pure/components/pages'
import ContentLayout from '@/layouts/ContentLayout.astro'

export const prerender = false

// Initialize Firebase (server-side)
const firebaseConfig = {
  apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
  authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.PUBLIC_FIREBASE_APP_ID
}

const app = initializeApp(firebaseConfig)
const db = getFirestore(app)

const { id } = Astro.params

if (!id) {
  return Astro.redirect('/404')
}

// Fetch relato from Firebase
let story: RelatoDocument | null = null
try {
  const docRef = doc(db, 'relatos', id)
  const docSnap = await getDoc(docRef)

  if (docSnap.exists() && docSnap.data().status === 'approved') {
    story = {
      id: docSnap.id,
      ...(docSnap.data() as Omit<RelatoDocument, 'id'>)
    }
  }
} catch (error) {
  console.error('Error fetching relato:', error)
}

if (!story) {
  return Astro.redirect('/404')
}

// Create title heading for TOC
const titleHeading = {
  depth: 1,
  text: story.title,
  slug: story.title.toLowerCase().replace(/\s+/g, '-')
}

// Extract headings from content
const contentHeadings = (
  marked.lexer(story.content).filter((token) => token.type === 'heading') as Tokens.Heading[]
).map((token) => ({
  depth: token.depth,
  text: token.text,
  slug: token.text.toLowerCase().replace(/\s+/g, '-')
}))

// Combine title heading with content headings
const headings = contentHeadings

console.log(headings)

marked.use({
  extensions: [
    {
      name: 'heading',
      renderer({ tokens, depth }) {
        if (!tokens) return ''
        const text = this.parser.parseInline(tokens)
        const slug = text.toLowerCase().replace(/\s+/g, '-')

        const escapedText = text.toLowerCase().replace(/[^\w]+/g, '-')

        return `<h${depth} id="${slug}">
              
                  ${text}
                </h${depth}>`
      }
    }
  ]
})

const content = await marked.parse(story.content)
---

<ContentLayout meta={{ title: story.title }} back={'/relatos'} highlightColor={'gray'}>
  {!!headings.length && <TOC {headings} slot='sidebar' />}

  <div class='mb-8'>
    {
      story.banner_image_url !== '' && (
        <img
          src={story.banner_image_url}
          alt={`Imagen del relato: ${story.title}`}
          class='md:h-90 mb-6 h-80 w-full rounded-2xl object-cover'
        />
      )
    }
    <div class='mb-4'>
      <h1 id='titulo' class='mb-2 text-3xl font-bold'>
        {story.title}
      </h1>
      <p class='text-lg'>Por {story.name} {story.surname}</p>
      <p class='mt-2 text-sm'>
        Publicado el {
          new Date(story.created_at?.toDate?.() || story.created_at).toLocaleDateString('es-AR', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })
        }
      </p>
    </div>
  </div>

  <article set:html={content} />
</ContentLayout>
