---
import { marked, type Tokens } from 'marked'

import { TOC } from 'astro-pure/components/pages'
import ContentLayout from '@/layouts/ContentLayout.astro'

export async function getStaticPaths() {
  const stories = [
    {
      id: '1',
      name: 'Juan pedro',
      surname: 'Maestro Splinter',
      phone: '22131231212',
      dni: {},
      content: '# Titulo de tu relato\n\n3D rendering is all around us. From huge action movies to car commercials to previews of upcoming buildings or product designs, 3D visualization has become so widespread and realistic that you probably don’t even know it’s there.\n\nIn this introductory piece, Chaos’ Ricardo Ortiz explains the basics of 3D rendering, from the computational methods that create imagery to the artistic techniques that create great computer-generated (CG) content and its various uses.\n\n## What is 3d rendering?\n\nPut simply, 3D rendering is the process of using a computer to generate a 2D image from a digital three-dimensional scene.\n\nTo generate an image, specific methodologies and special software and hardware are used. Therefore, we need to understand that 3D rendering is a process—the one that builds the image.\n\n### More information\n\n3D rendering is an essential technique for many industries including architecture, product design, advertising, video games and visual effects for film, TV and animation.\n\nIn design and architecture, renders allow creative people to communicate their ideas in a clear and transparent way. A render gives them the chance to evaluate their proposals, experiment with materials, conduct studies and contextualize their designs in the real world before they are built or manufactured.\n\nFor the media and entertainment industries, 3D rendering is fundamental to the creation of sequences and animations that tell stories, whether we’re watching an animated movie, a period drama, or an action sequence with explosions, ships from the future, exotic locales, or extraterrestrial creatures.\n\n1. asd\n\n2. asd\n\n3. asd\n\n4. asd\n'
    }
  ]
  return stories.map((story) => ({
    params: { id: story.id },
    props: { story }
  }))
}

const { story } = Astro.props

console.log("story ----------------------------------------", story)

const headings = (
  marked.lexer(story.content).filter((token) => token.type === 'heading') as Tokens.Heading[]
).map((token) => ({
  depth: token.depth,
  text: token.text,
  slug: token.text.toLowerCase().replace(/\s+/g, '-')
}))

marked.use({
 extensions: [{
    name: 'heading',
    renderer({tokens, depth}) {
      if (!tokens) return ''
      const text = this.parser.parseInline(tokens)
      const slug = text.toLowerCase().replace(/\s+/g, '-')

      const escapedText = text.toLowerCase().replace(/[^\w]+/g, '-')

      return `<h${depth} id="${slug}">
                  <a name="${escapedText}" class="anchor" href="#${escapedText}">
                    <span class="header-link"></span>
                  </a>
                  ${text}
                </h${depth}>`
    }
  }]
})

const content = await marked.parse(story.content)
---

<ContentLayout meta={{ title: 'test' }} back={'/relatos'}>
  {!!headings.length && <TOC {headings} slot='sidebar' />}
  <article set:html={content} />
</ContentLayout>
